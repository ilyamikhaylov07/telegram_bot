import telebot
import json
import pickle
from random import choice
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("apitelegram")  

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
with open('model/intent_model.pkl', 'rb') as f:
    model = pickle.load(f)

with open('model/vectorizer.pkl', 'rb') as f:
    vectorizer = pickle.load(f)

with open('data/intents.json', 'r', encoding='utf-8') as f:
    intents = json.load(f)

with open('data/products.json', 'r', encoding='utf-8') as f:
    products = json.load(f)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
def get_intent(text):
    vec = vectorizer.transform([text])
    tag = model.predict(vec)[0]
    for intent in intents['intents']:
        if intent['tag'] == tag:
            return choice(intent['responses']), tag
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.", None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
product_index = {}

def send_product_with_buttons(chat_id, user_id):
    index = product_index.get(user_id, 0)
    if index >= len(products):
        bot.send_message(chat_id, "–ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â—ë!")
        return

    product = products[index]
    caption = f"\U0001F4CC {product['name']}\n\U0001F4DD {product['desc']}\n\U0001F4B0 {product['price']}"
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_product"),
        InlineKeyboardButton("–°—Ç–æ–ø", callback_data="stop_products")
    )
    bot.send_photo(chat_id, product['image_url'], caption=caption, reply_markup=markup)
    product_index[user_id] = index + 1

# –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º
def show_inline_buttons(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–î–∞, –ø–æ–∫–∞–∂–∏ –æ–±–æ–∏", callback_data="show_wallpapers"),
        InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="no_thanks")
    )
    bot.send_message(chat_id, "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞?", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –û–±–æ–π—á–∏–∫ üòá üòÉ!!!. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text.strip()
    response, tag = get_intent(user_text)

    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text} | –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥: {tag}")

    if tag is None:
        bot.send_message(message.chat.id, response)
        return

    if tag.startswith("smalltalk_"):
        bot.send_message(message.chat.id, response)
        if tag in ["smalltalk_home", "ad_wallpaper_redirect"]:
            show_inline_buttons(message.chat.id)

    elif tag == "ad_wallpaper_offer":
        bot.send_message(message.chat.id, response)
        bot.send_message(message.chat.id, "–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:")
        product_index[message.chat.id] = 0
        send_product_with_buttons(message.chat.id, message.chat.id)

    else:
        bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "show_wallpapers":
        bot.send_message(call.message.chat.id, "–°—É–ø–µ—Ä! –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–±–æ–µ–≤:")
        product_index[call.message.chat.id] = 0
        send_product_with_buttons(call.message.chat.id, call.message.chat.id)

    elif call.data == "no_thanks":
        bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!")

    elif call.data == "next_product":
        send_product_with_buttons(call.message.chat.id, call.message.chat.id)

    elif call.data == "stop_products":
        bot.send_message(call.message.chat.id, "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)